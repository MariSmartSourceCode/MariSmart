<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int WAITMAX=100;

const int shipment = 0;
const int shipper = 1;
const int carrier = 2;
const int consignee = 3;
const int pre_shipment_inspector = 4;
const int export_port_operator = 5;
const int import_port_operator = 6;

int status = 0;
const int status_created = 1;
const int status_signed = 2;
const int status_inspected = 3;
const int status_exported = 4;
const int status_departed = 5;
const int status_lost = 6;
const int status_arrived = 7;
const int status_imported = 8;
const int status_rearranged = 9;
const int status_received = 10;
const int status_claimed = 11;
const int status_closed = 12;

int quantity = 1;
int weight = 2;
int volume = 10;
int price = 10;
int down_payment = 5;
int transportation_fee = 2;
int compensation_limit = 5;
int depart_date = 10;
int arrive_date = 30;
int sign_valid = 5;
int receive_valid = 60; 
int compensation_valid = 7; 

bool signatures[7];
int balances[7];
int escrow_thresholds[7] = {0,100,100,100,1,1,1};
int net[7];

bool is_delayed = false;
bool is_damaged = false;
bool is_lost = false;
int compensation_amount = 0;
int compensation_claimer = 0;
bool pass_code;
int violationType_None = 0;
int violationType_Temp = 1;
int violationType_Open = 2;
int violationType_Route = 3;
int violationType_Jerk = 4;



// Auxiliary
bool call_create, call_inspect, call_sign, call_close, call_cancel, call_claim, call_depart, call_reportLoss, call_arrive, call_reportDamage, call_compensate, call_rearrange, call_receiveShipment, call_exportShipment, call_importShipment, call_withdraw;

bool already_create, already_sign, already_close, already_depart, already_arrive, already_reportLoss, already_reportDamage, already_compensate, already_rearrange, already_receiveShipment, already_exportShipment, already_importShipment, already_withdraw;

chan chan_create, chan_inspect, chan_sign, chan_close, chan_cancel, chan_claim, chan_depart, chan_reportLoss, chan_arrive, chan_reportDamage, chan_compensate, chan_rearrange, chan_receiveShipment, chan_exportShipment, chan_importShipment, chan_withdraw;


bool sign_flag = false;
bool inspect_flag = false;

clock block_timestamp;
clock waitCLK;
clock depart_timeCLK;
clock create_timeCLK;
clock arrive_timeCLK;
clock receive_timeCLK;

int msg_sender = -1;
bool TIMED_CONDITION_0;


bool no_transition(){
	return !(call_create || call_inspect || call_sign || call_close || call_cancel || call_claim || call_depart || call_reportLoss || call_arrive || call_reportDamage || call_compensate || call_rearrange || call_receiveShipment || call_exportShipment || call_importShipment);
}
void shipment_create(){
        status = status_created;
		already_create = true;
		signatures[msg_sender] = true;
        balances[msg_sender] += escrow_thresholds[msg_sender];
        net[msg_sender] -= escrow_thresholds[msg_sender];
        net[shipment] += escrow_thresholds[msg_sender];
}
void shipment_sign(){
		signatures[pre_shipment_inspector]=true;
signatures[export_port_operator]=true;
signatures[import_port_operator]=true;

        signatures[msg_sender] = true;
        balances[msg_sender] += escrow_thresholds[msg_sender];
        net[msg_sender] -= escrow_thresholds[msg_sender];
        net[shipment] += escrow_thresholds[msg_sender];
        if (
            signatures[shipper] == true &amp;&amp;
            signatures[carrier] == true &amp;&amp;
            signatures[consignee] == true &amp;&amp;
            signatures[pre_shipment_inspector] == true &amp;&amp;
            signatures[export_port_operator] == true &amp;&amp;
            signatures[import_port_operator] == true
        ) {
            status = status_signed;  
            sign_flag = true;
			already_sign = true;
        }
}

void shipment_withdraw(){
        int amount = balances[msg_sender];
        balances[msg_sender] = 0;
        net[msg_sender] += amount;
        net[shipment] -= amount;
}

void shipment_close(){
        status = status_closed;
		already_close = true;
}

void shipment_cancel(){
        balances[shipper] -= transportation_fee / 2;
        balances[carrier] += transportation_fee / 2;
        status = status_closed;
		already_close = true;
}

void shipment_claim(
        int _compensation_amount
    ){
        if(_compensation_amount &gt; compensation_limit)compensation_amount = compensation_limit;
        else compensation_amount = _compensation_amount;
        compensation_claimer = msg_sender;
        status = status_claimed;
}
void shipment_depart(){
        balances[consignee] -= down_payment;
        balances[shipper] += down_payment;
        status = status_departed;
		already_depart = true;
}
void shipment_reportLoss(){
        status = status_lost;
        is_lost = true;
		already_reportLoss = true;
}
void shipment_arrive(){
        balances[shipper] -= transportation_fee;
        balances[carrier] += transportation_fee;
        if(TIMED_CONDITION_0)
            is_delayed = true;
        status = status_arrived;
		already_arrive = true;
}
void shipment_reportDamage(){
        is_damaged = true;
		already_reportDamage = true;
}
void shipment_compensate(){
        balances[carrier] -= compensation_amount;
        balances[compensation_claimer] += compensation_amount;
        compensation_amount = 0;
        status = status_closed;
		already_close = true;
}
void shipment_rearrange(){
        status = status_rearranged;
}
void shipment_receiveShipment(bool _is_damaged){
        is_damaged = is_damaged || _is_damaged;
        balances[consignee] -= price - down_payment;
        balances[shipper] += price - down_payment;
        status = status_received;
}
bool shipment_inspect(bool _is_passed){
		if(_is_passed) {
			status = status_inspected;
			inspect_flag = true;
		}
		else {
			status = status_closed;
			inspect_flag = false;
			already_close = true;
		}
		return _is_passed;
}
void shipment_exportShipment(){
        status = status_exported;
}
void shipment_importShipment() {
        status = status_imported;
}
bool shipment_externalTransfer(int to, int amount){
		balances[msg_sender] -= amount;
		balances[to] += amount;
		return true;
}
</declaration>
	<template>
		<name>Shipment</name>
		<location id="id0" x="-238" y="-204">
			<name x="-306" y="-204">created</name>
		</location>
		<location id="id1" x="25" y="-204">
			<name x="0" y="-195">signed</name>
		</location>
		<location id="id2" x="306" y="-204">
			<name x="229" y="-204">inspected</name>
		</location>
		<location id="id3" x="-476" y="-68">
			<name x="-476" y="-102">closed</name>
		</location>
		<location id="id4" x="25" y="-68">
			<name x="-17" y="-68">lost</name>
		</location>
		<location id="id5" x="306" y="-68">
			<name x="229" y="-68">exported</name>
		</location>
		<location id="id6" x="25" y="68">
			<name x="-43" y="68">claimed</name>
		</location>
		<location id="id7" x="306" y="68">
			<name x="229" y="68">departed</name>
		</location>
		<location id="id8" x="-476" y="170">
			<name x="-476" y="144">rearranged</name>
		</location>
		<location id="id9" x="-340" y="68">
			<name x="-408" y="68">received</name>
		</location>
		<location id="id10" x="25" y="170">
			<name x="-51" y="170">imported</name>
		</location>
		<location id="id11" x="306" y="170">
			<name x="246" y="170">arrived</name>
		</location>
		<location id="id12" x="-476" y="-204">
			<name x="-467" y="-229">start</name>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="93" y="93">chan_reportDamage?</label>
			<nail x="238" y="68"/>
			<nail x="238" y="136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-280" y="-272">sign_flag == false</label>
			<label kind="synchronisation" x="-280" y="-255">chan_sign?</label>
			<nail x="-187" y="-238"/>
			<nail x="-289" y="-238"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-493" y="-153">chan_withdraw?</label>
			<nail x="-476" y="-136"/>
			<nail x="-408" y="-136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-450" y="-161">chan_close?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-416" y="-221">chan_create?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-26" y="-153">chan_cancel?</label>
			<nail x="25" y="-136"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id3"/>
			<label kind="guard" x="-374" y="8">receive_timeCLK &gt;
 compensation_valid</label>
			<label kind="synchronisation" x="-399" y="-8">chan_close?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-221" y="-17">chan_compensate?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-59" y="-8">block_timestamp &lt;= 
arrive_date + compensation_valid</label>
			<label kind="synchronisation" x="-59" y="-25">chan_claim?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-297" y="-68">block_timestamp &gt; 
arrive_date + compensation_valid</label>
			<label kind="synchronisation" x="-297" y="-85">chan_close?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="136" y="-34">chan_reportLoss?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-535" y="34">chan_close?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-374" y="170">arrive_timeCLK &gt; receive_valid</label>
			<label kind="synchronisation" x="-374" y="153">chan_rearrange?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="-212" y="68">receive_timeCLK &lt;=
 compensation_valid</label>
			<label kind="synchronisation" x="-221" y="51">chan_claim?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-314" y="127">arrive_timeCLK &lt;= receive_valid</label>
			<label kind="synchronisation" x="-314" y="110">chan_receiveShipment?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="110" y="153">chan_importShipment?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="255" y="119">chan_arrive?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="246" y="-8">chan_depart?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="187" y="-144">chan_exportShipment?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="85" y="-238">inspect_flag == true</label>
			<label kind="synchronisation" x="85" y="-221">chan_inspect?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-204" y="-170">inspect_flag == false</label>
			<label kind="synchronisation" x="-204" y="-153">chan_inspect?</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-161" y="-238">sign_flag == true</label>
			<label kind="synchronisation" x="-161" y="-221">chan_sign?</label>
		</transition>
	</template>
	<template>
		<name>Shipper</name>
		<declaration>
int uid_counter;
int create_ret;

int create(){
call_create = true;  shipment_create ();
 uid_counter  += 1;
return  uid_counter ;
}
void withdraw(){
call_withdraw = true;  shipment_withdraw ();
}
void cancel(int _cancellation_fee){
call_cancel = true;  shipment_cancel ();
 shipment_externalTransfer (consignee, _cancellation_fee );
}
void claim(int _compensation_amount){
call_claim = true;  shipment_claim ( _compensation_amount );
}
void close(){
call_close = true;  shipment_close ();
}

</declaration>
<location id="create" x="400" y="0">
<name>create_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="cancel" x="400" y="140">
<name>cancel_called</name>
<committed/>
</location>
<location id="claim" x="400" y="210">
<name>claim_called</name>
<committed/>
</location>
<location id="close" x="400" y="280">
<name>close_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>
<transition>
<source ref="idle"/>
<target ref="create"/>
<label kind="select" x="40" y="-63"></label>
<label kind="guard" x="40" y="-42">status==0 &amp;&amp; signatures[shipper] == false</label>
<label kind="assignment" x="40" y="-21">create_timeCLK = 0, msg_sender = shipper, create_ret = create()</label>
<nail x="0" y="0"/>
</transition><transition>
<source ref="idle"/>
<target ref="withdraw"/>
<label kind="select" x="40" y="7"></label>
<label kind="guard" x="40" y="28">status==status_closed &amp;&amp; balances[shipper] &gt; 0</label>
<label kind="assignment" x="40" y="49">msg_sender = shipper, withdraw()</label>
<nail x="0" y="70"/>
</transition><transition>
<source ref="idle"/>
<target ref="cancel"/>
<label kind="select" x="40" y="77">_cancellation_fee:int[0,30]</label>
<label kind="guard" x="40" y="98">status == status_exported</label>
<label kind="assignment" x="40" y="119">msg_sender = shipper, cancel(_cancellation_fee)</label>
<nail x="0" y="140"/>
</transition><transition>
<source ref="idle"/>
<target ref="claim"/>
<label kind="select" x="40" y="147">_compensation_amount:int[0,30]</label>
<label kind="guard" x="40" y="168">status == status_lost &amp;&amp; block_timestamp &lt;= arrive_date + compensation_valid</label>
<label kind="assignment" x="40" y="189">msg_sender = shipper, claim(_compensation_amount)</label>
<nail x="0" y="210"/>
</transition><transition>
<source ref="idle"/>
<target ref="close"/>
<label kind="select" x="40" y="217"></label>
<label kind="guard" x="40" y="238">status==status_created &amp;&amp; create_timeCLK &gt; sign_valid</label>
<label kind="assignment" x="40" y="259">msg_sender = shipper, close()</label>
<nail x="0" y="280"/>
</transition><transition>
<source ref="create"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="-63">chan_create!</label>
<label kind="assignment" x="440" y="-42">waitCLK=0,call_create=false</label>
<label kind="guard" x="440" y="-21">call_create</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="create"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="-42">waitCLK=0</label>
<label kind="guard" x="440" y="-21">no_transition()</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="7">chan_withdraw!</label>
<label kind="assignment" x="440" y="28">waitCLK=0,call_withdraw=false</label>
<label kind="guard" x="440" y="49">call_withdraw</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="28">waitCLK=0</label>
<label kind="guard" x="440" y="49">no_transition()</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="cancel"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="77">chan_cancel!</label>
<label kind="assignment" x="440" y="98">waitCLK=0,call_cancel=false</label>
<label kind="guard" x="440" y="119">call_cancel</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="cancel"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="98">waitCLK=0</label>
<label kind="guard" x="440" y="119">no_transition()</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="claim"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="147">chan_claim!</label>
<label kind="assignment" x="440" y="168">waitCLK=0,call_claim=false</label>
<label kind="guard" x="440" y="189">call_claim</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="claim"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="168">waitCLK=0</label>
<label kind="guard" x="440" y="189">no_transition()</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="close"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="217">chan_close!</label>
<label kind="assignment" x="440" y="238">waitCLK=0,call_close=false</label>
<label kind="guard" x="440" y="259">call_close</label>
<nail x="600" y="280"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="close"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="238">waitCLK=0</label>
<label kind="guard" x="440" y="259">no_transition()</label>
<nail x="600" y="280"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition>
		
	</template>
	<template>
		<name>Carrier</name>
		<declaration>
int uid_counter;
int sign_ret;

int sign(){
int escrow_amount = escrow_thresholds[ msg_sender ];
call_sign = true;  shipment_sign ();
 uid_counter  += 1;
return  uid_counter ;
}
void withdraw(){
call_withdraw = true;  shipment_withdraw ();
}
void cancel(){
shipment_cancel();
}
void close(){
call_close = true;  shipment_close ();
}
void depart(){
call_depart = true;  shipment_depart ();
}
void reportLoss(int _v){
call_reportLoss = true;  shipment_reportLoss ();
 shipment_externalTransfer (consignee,down_payment);
if( _v  ==  violationType_Jerk ){
}
else{
if( _v  ==  violationType_Open ){
}
else{
if( _v  ==  violationType_Temp ){
}
else{
if( _v  ==  violationType_Route ){
}
}
}
}
}
void reportDamage(){
call_reportDamage = true;  shipment_reportDamage ();
}
void arrive(){
call_arrive = true;  shipment_arrive ();
}
void rearrange(){
call_rearrange = true;  shipment_rearrange ();
}
void compensate(){
call_compensate = true;  shipment_compensate ();
}

</declaration>
<location id="sign" x="400" y="0">
<name>sign_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="close" x="400" y="140">
<name>close_called</name>
<committed/>
</location>
<location id="depart" x="400" y="210">
<name>depart_called</name>
<committed/>
</location>
<location id="reportLoss" x="400" y="280">
<name>reportLoss_called</name>
<committed/>
</location>
<location id="reportDamage" x="400" y="350">
<name>reportDamage_called</name>
<committed/>
</location>
<location id="arrive" x="400" y="420">
<name>arrive_called</name>
<committed/>
</location>
<location id="rearrange" x="400" y="490">
<name>rearrange_called</name>
<committed/>
</location>
<location id="compensate" x="400" y="560">
<name>compensate_called</name>
<committed/>
</location>
<location id="cancel" x="400" y="630">
<name>cancel_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>
<transition>
<source ref="idle"/>
<target ref="sign"/>
<label kind="select" x="40" y="-63"></label>
<label kind="guard" x="40" y="-42">status==status_created &amp;&amp; signatures[carrier] == false</label>
<label kind="assignment" x="40" y="-21">msg_sender = carrier, sign_ret = sign()</label>
<nail x="0" y="0"/>
</transition><transition>
<source ref="idle"/>
<target ref="withdraw"/>
<label kind="select" x="40" y="7"></label>
<label kind="guard" x="40" y="28">status==status_closed &amp;&amp; balances[carrier] &gt; 0</label>
<label kind="assignment" x="40" y="49">msg_sender = carrier, withdraw()</label>
<nail x="0" y="70"/>
</transition><transition>
<source ref="idle"/>
<target ref="close"/>
<label kind="select" x="40" y="77"></label>
<label kind="guard" x="40" y="98">(block_timestamp &gt; arrive_date + compensation_valid &amp;&amp; status == status_lost)</label>
<label kind="assignment" x="40" y="119">msg_sender = carrier, close()</label>
<nail x="0" y="140"/>
</transition><transition>
<source ref="idle"/>
<target ref="close"/>
<label kind="select" x="40" y="77"></label>
<label kind="guard" x="40" y="98">(receive_timeCLK &gt; compensation_valid &amp;&amp; status == status_received)</label>
<label kind="assignment" x="40" y="119">msg_sender = carrier, close()</label>
<nail x="0" y="140"/>
</transition><transition>
<source ref="idle"/>
<target ref="close"/>
<label kind="select" x="40" y="77"></label>
<label kind="guard" x="40" y="98">status == status_rearranged</label>
<label kind="assignment" x="40" y="119">msg_sender = carrier, close()</label>
<nail x="0" y="140"/>
</transition><transition>
<source ref="idle"/>
<target ref="depart"/>
<label kind="select" x="40" y="147"></label>
<label kind="guard" x="40" y="168">status == status_exported</label>
<label kind="assignment" x="40" y="189">depart_timeCLK = 0, msg_sender = carrier, depart()</label>
<nail x="0" y="210"/>
</transition><transition>
<source ref="idle"/>
<target ref="reportLoss"/>
<label kind="select" x="40" y="217">_v:int[0,30]</label>
<label kind="guard" x="40" y="238">status==status_departed</label>
<label kind="assignment" x="40" y="259">msg_sender = carrier, reportLoss(_v)</label>
<nail x="0" y="280"/>
</transition><transition>
<source ref="idle"/>
<target ref="reportDamage"/>
<label kind="select" x="40" y="287"></label>
<label kind="guard" x="40" y="308">status==status_departed &amp;&amp; is_damaged==false</label>
<label kind="assignment" x="40" y="329">msg_sender = carrier, reportDamage()</label>
<nail x="0" y="350"/>
</transition><transition>
<source ref="idle"/>
<target ref="arrive"/>
<label kind="select" x="40" y="357"></label>
<label kind="guard" x="40" y="378">status==status_departed&amp;&amp; block_timestamp&lt;=arrive_date</label>
<label kind="assignment" x="40" y="399">TIMED_CONDITION_0 = false, arrive_timeCLK = 0, msg_sender = carrier, arrive()</label>
<nail x="0" y="420"/>
</transition><transition>
<source ref="idle"/>
<target ref="arrive"/>
<label kind="select" x="40" y="357"></label>
<label kind="guard" x="40" y="378">status==status_departed&amp;&amp; block_timestamp&gt;arrive_date</label>
<label kind="assignment" x="40" y="399">TIMED_CONDITION_0 = true, arrive_timeCLK = 0, msg_sender = carrier, arrive()</label>
<nail x="0" y="420"/>
</transition><transition>
<source ref="idle"/>
<target ref="rearrange"/>
<label kind="select" x="40" y="427"></label>
<label kind="guard" x="40" y="448">status==status_imported &amp;&amp; arrive_timeCLK &gt; receive_valid</label>
<label kind="assignment" x="40" y="469">msg_sender = carrier, rearrange()</label>
<nail x="0" y="490"/>
</transition><transition>
<source ref="idle"/>
<target ref="compensate"/>
<label kind="select" x="40" y="497"></label>
<label kind="guard" x="40" y="518">status==status_claimed &amp;&amp; compensation_amount &gt;= 0 &amp;&amp; balances[carrier] &gt;= compensation_amount</label>
<label kind="assignment" x="40" y="539">msg_sender = carrier, compensate()</label>
<nail x="0" y="560"/>
</transition><transition>
<source ref="sign"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="-63">chan_sign!</label>
<label kind="assignment" x="440" y="-42">waitCLK=0,call_sign=false</label>
<label kind="guard" x="440" y="-21">call_sign</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="sign"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="-42">waitCLK=0</label>
<label kind="guard" x="440" y="-21">no_transition()</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="7">chan_withdraw!</label>
<label kind="assignment" x="440" y="28">waitCLK=0,call_withdraw=false</label>
<label kind="guard" x="440" y="49">call_withdraw</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="28">waitCLK=0</label>
<label kind="guard" x="440" y="49">no_transition()</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="close"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="77">chan_close!</label>
<label kind="assignment" x="440" y="98">waitCLK=0,call_close=false</label>
<label kind="guard" x="440" y="119">call_close</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="close"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="98">waitCLK=0</label>
<label kind="guard" x="440" y="119">no_transition()</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="depart"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="147">chan_depart!</label>
<label kind="assignment" x="440" y="168">waitCLK=0,call_depart=false</label>
<label kind="guard" x="440" y="189">call_depart</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="depart"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="168">waitCLK=0</label>
<label kind="guard" x="440" y="189">no_transition()</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="reportLoss"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="217">chan_reportLoss!</label>
<label kind="assignment" x="440" y="238">waitCLK=0,call_reportLoss=false</label>
<label kind="guard" x="440" y="259">call_reportLoss</label>
<nail x="600" y="280"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="reportLoss"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="238">waitCLK=0</label>
<label kind="guard" x="440" y="259">no_transition()</label>
<nail x="600" y="280"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="reportDamage"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="287">chan_reportDamage!</label>
<label kind="assignment" x="440" y="308">waitCLK=0,call_reportDamage=false</label>
<label kind="guard" x="440" y="329">call_reportDamage</label>
<nail x="600" y="350"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="reportDamage"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="308">waitCLK=0</label>
<label kind="guard" x="440" y="329">no_transition()</label>
<nail x="600" y="350"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="arrive"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="357">chan_arrive!</label>
<label kind="assignment" x="440" y="378">waitCLK=0,call_arrive=false</label>
<label kind="guard" x="440" y="399">call_arrive</label>
<nail x="600" y="420"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="arrive"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="378">waitCLK=0</label>
<label kind="guard" x="440" y="399">no_transition()</label>
<nail x="600" y="420"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="rearrange"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="427">chan_rearrange!</label>
<label kind="assignment" x="440" y="448">waitCLK=0,call_rearrange=false</label>
<label kind="guard" x="440" y="469">call_rearrange</label>
<nail x="600" y="490"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="rearrange"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="448">waitCLK=0</label>
<label kind="guard" x="440" y="469">no_transition()</label>
<nail x="600" y="490"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="compensate"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="497">chan_compensate!</label>
<label kind="assignment" x="440" y="518">waitCLK=0,call_compensate=false</label>
<label kind="guard" x="440" y="539">call_compensate</label>
<nail x="600" y="560"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="compensate"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="518">waitCLK=0</label>
<label kind="guard" x="440" y="539">no_transition()</label>
<nail x="600" y="560"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition>
		
	</template>
	<template>
		<name>Consignee</name>
		<declaration>
int uid_counter;
int sign_ret;

int sign(bool _passcode){
int escrow_amount = escrow_thresholds[ msg_sender ];
call_sign = true;  shipment_sign ();
 uid_counter  += 1;
pass_code =  _passcode ;
return  uid_counter ;
}
void withdraw(){
call_withdraw = true;  shipment_withdraw ();
}
void receiveShipment(bool _passcode, bool _is_passed){
;
;
call_receiveShipment = true;  shipment_receiveShipment ( _is_passed );
}
void claim(int _compensation_amount){
call_claim = true;  shipment_claim ( _compensation_amount );
}

		</declaration>
<location id="sign" x="400" y="0">
<name>sign_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="receiveShipment" x="400" y="140">
<name>receiveShipment_called</name>
<committed/>
</location>
<location id="claim" x="400" y="210">
<name>claim_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>
<transition>
<source ref="idle"/>
<target ref="sign"/>
<label kind="select" x="40" y="-63">_passcode:int[0,1] </label>
<label kind="guard" x="40" y="-42">status==status_created &amp;&amp; signatures[consignee] == false</label>
<label kind="assignment" x="40" y="-21">msg_sender = consignee, sign_ret = sign(_passcode)</label>
<nail x="0" y="0"/>
</transition><transition>
<source ref="idle"/>
<target ref="withdraw"/>
<label kind="select" x="40" y="7"></label>
<label kind="guard" x="40" y="28">status==status_closed &amp;&amp; balances[consignee] &gt; 0</label>
<label kind="assignment" x="40" y="49">msg_sender = consignee, withdraw()</label>
<nail x="0" y="70"/>
</transition><transition>
<source ref="idle"/>
<target ref="receiveShipment"/>
<label kind="select" x="40" y="77">_passcode:int[0,1] , _is_passed:int[0,1] </label>
<label kind="guard" x="40" y="98">status==status_imported &amp;&amp; arrive_timeCLK&lt;=receive_valid &amp;&amp; pass_code ==  _passcode  &amp;&amp;  block_timestamp  &lt;= arrive_timeCLK + receive_valid</label>
<label kind="assignment" x="40" y="119">receive_timeCLK = 0, msg_sender = consignee, receiveShipment(_passcode,_is_passed)</label>
<nail x="0" y="140"/>
</transition><transition>
<source ref="idle"/>
<target ref="claim"/>
<label kind="select" x="40" y="147">_compensation_amount:int[0,30]</label>
<label kind="guard" x="40" y="168">status == status_received &amp;&amp; (is_delayed || is_damaged) &amp;&amp; receive_timeCLK&lt;=compensation_valid</label>
<label kind="assignment" x="40" y="189">msg_sender = consignee, claim(_compensation_amount)</label>
<nail x="0" y="210"/>
</transition><transition>
<source ref="sign"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="-63">chan_sign!</label>
<label kind="assignment" x="440" y="-42">waitCLK=0,call_sign=false</label>
<label kind="guard" x="440" y="-21">call_sign</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="sign"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="-42">waitCLK=0</label>
<label kind="guard" x="440" y="-21">no_transition()</label>
<nail x="600" y="0"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="7">chan_withdraw!</label>
<label kind="assignment" x="440" y="28">waitCLK=0,call_withdraw=false</label>
<label kind="guard" x="440" y="49">call_withdraw</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="withdraw"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="28">waitCLK=0</label>
<label kind="guard" x="440" y="49">no_transition()</label>
<nail x="600" y="70"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="receiveShipment"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="77">chan_receiveShipment!</label>
<label kind="assignment" x="440" y="98">waitCLK=0,call_receiveShipment=false</label>
<label kind="guard" x="440" y="119">call_receiveShipment</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="receiveShipment"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="98">waitCLK=0</label>
<label kind="guard" x="440" y="119">no_transition()</label>
<nail x="600" y="140"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="claim"/>
<target ref="idle"/>
<label kind="synchronisation" x="440" y="147">chan_claim!</label>
<label kind="assignment" x="440" y="168">waitCLK=0,call_claim=false</label>
<label kind="guard" x="440" y="189">call_claim</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition><transition>
<source ref="claim"/>
<target ref="idle"/>
<label kind="assignment" x="440" y="168">waitCLK=0</label>
<label kind="guard" x="440" y="189">no_transition()</label>
<nail x="600" y="210"/>
<nail x="600" y="-70"/>
<nail x="0" y="-70"/>
</transition>
	</template>
	<template>
		<name>PreShipmentInspector</name>
		<declaration>
int uid_counter;
bool inspect_ret;

void sign(){shipment_sign();}
void withdraw(){
shipment_withdraw();
}
bool inspect(bool _is_passed){
return shipment_inspect(_is_passed);
}

</declaration>
<location id="sign" x="400" y="0">
<name>sign_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="inspect" x="400" y="140">
<name>inspect_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>

	</template>
	<template>
		<name>ExportPortOperator</name>
		<declaration>
int uid_counter;

void sign(){shipment_sign();}
void withdraw(){
shipment_withdraw();
}
void exportShipment(){
shipment_exportShipment();
}

</declaration>
<location id="sign" x="400" y="0">
<name>sign_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="exportShipment" x="400" y="140">
<name>exportShipment_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>

	</template>
	<template>
		<name>ImportPortOperator</name>
		<declaration>
int uid_counter;

void sign(){shipment_sign();}
void withdraw(){
shipment_withdraw();
}
void importShipment(){
shipment_importShipment();
}

</declaration>
<location id="sign" x="400" y="0">
<name>sign_called</name>
<committed/>
</location>
<location id="withdraw" x="400" y="70">
<name>withdraw_called</name>
<committed/>
</location>
<location id="importShipment" x="400" y="140">
<name>importShipment_called</name>
<committed/>
</location>
<location id="idle" x="0" y="0">
<name x="20" y="0">idle</name>
<label kind="invariant" x="20" y="10">waitCLK&lt;WAITMAX</label>
</location>

<init ref="idle"/>

	</template>
	<system>// List one or more processes to be composed into a system.
system Shipment, Shipper, Carrier, Consignee, PreShipmentInspector, ExportPortOperator, ImportPortOperator;
</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
